name: Build RPM

on:
  push:
    branches:
      - master
    paths:
      - .github/workflows/build-rpm.yaml
      - containers/rpm/Dockerfile
      - pyproject.toml
      - poetry.lock
      - scripts/**
      - tsdfileapi/**
    tags:
      - v*

env:
  POETRY_VERSION: "1.3.2"
  POETRY_DYNAMIC_VERSIONING_VERSION: "1.1.0"

jobs:
  build-rpm:
    strategy:
      fail-fast: false
      matrix:
        EL_VERSION: ["8", "9"]
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set container tag to variable
        run: echo "CONTAINER_TAG=tsd-file-api:${{ github.sha }}-rpmbuilder-el${{ matrix.EL_VERSION }}-r${{ github.run_attempt }}" >> $GITHUB_ENV
      - name: Build the RPM builder container image
        run: >
          docker build
          --tag "${{ env.CONTAINER_TAG }}"
          --build-arg ROCKY_VERSION="${{ matrix.EL_VERSION }}"
          --build-arg POETRY_VERSION="${{ env.POETRY_VERSION }}"
          --build-arg POETRY_DYNAMIC_VERSIONING_VERSION="${{ env.POETRY_DYNAMIC_VERSIONING_VERSION }}"
          -f "./containers/rpm/Dockerfile"
          .
      - name: Extract built RPM from the container image
        run: |
          export CONTAINER_ID=$(docker create "${{ env.CONTAINER_TAG }}")
          sleep 5
          docker cp "$CONTAINER_ID":/file-api/rpm ./
          docker rm "$CONTAINER_ID"
      - name: Get artifact filename
        run: echo "ARTIFACT_NAME=$(ls rpm/)" >> $GITHUB_ENV
      - name: Upload the extracted RPM as artifact
        uses: actions/upload-artifact@v4
        with:
          name: "${{ env.ARTIFACT_NAME }}"
          path: rpm
          if-no-files-found: error
