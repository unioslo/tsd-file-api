name: Tests

on:
  push:
    paths:
      - .github/workflows/tests.yaml
      - pyproject.toml
      - poetry.lock
      - tsdfileapi/**
  pull_request:
    paths:
      - .github/workflows/tests.yaml
      - pyproject.toml
      - poetry.lock
      - tsdfileapi/**

env:
  TSD_FILE_API_DB_NAME: tsd_file_api_db
  TSD_FILE_API_DB_USER: tsd_file_api_user
  TSD_FILE_API_DB_PASS: tsd_file_api_pass

jobs:
  tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    services:
      postgres:
        image: docker.io/postgres:14
        env:
          POSTGRES_DB: ${{env.TSD_FILE_API_DB_NAME}}
          POSTGRES_USER: ${{env.TSD_FILE_API_DB_USER}}
          POSTGRES_PASSWORD: ${{env.TSD_FILE_API_DB_PASS}}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Set container tag to variable
        run: echo "CONTAINER_TAG=tsd-file-api:${{ github.sha }}-py${{ matrix.python-version }}-r${{ github.run_attempt }}" >> $GITHUB_ENV
      - name: Build test container image
        run: docker build --tag "${{ env.CONTAINER_TAG }}" --build-arg PYTHON_VERSION="${{ matrix.python-version }}"  -f "./containers/test/Dockerfile" .
      - name: Start tsd-file-api container and run tests (SQLite backend)
        run: >
          docker run --rm
          -v $PWD:/file-api:ro
          --name tsd-file-api-sqlite
          --health-cmd "curl --fail http://127.0.0.1:3003/v1/all/config || exit 1"
          --health-interval=2s
          "${{ env.CONTAINER_TAG }}" &
          until [ "$(docker inspect -f {{.State.Health.Status}} tsd-file-api-sqlite)" == "healthy" ]; do sleep 0.1; done &&
          docker exec tsd-file-api-sqlite pytest tsdfileapi/test_file_api.py
      - name: Start tsd-file-api container and run tests (PostgreSQL backend)
        run: >
          docker run --rm
          -v $PWD:/file-api:ro
          --name tsd-file-api-postgres
          --health-cmd "curl --fail http://127.0.0.1:3003/v1/all/config || exit 1"
          --health-interval=2s
          "${{ env.CONTAINER_TAG }}"
          tsdfileapi/config/config-test-container-postgres.yaml &
          until [ "$(docker inspect -f {{.State.Health.Status}} tsd-file-api-postgres)" == "healthy" ]; do sleep 0.1; done &&
          docker exec tsd-file-api-postgres pytest tsdfileapi/test_file_api.py
